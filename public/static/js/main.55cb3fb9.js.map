{"version":3,"file":"static/js/main.55cb3fb9.js","mappings":"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","sources":["MainAppScreen.js","OAuthScreen.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, FlatList } from 'react-native';\r\nimport axios from 'axios';\r\n\r\nconst MainAppScreen = ({ route }) => {\r\n  const { accessToken } = route.params;\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const fetchTasks = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get('https://tasks.googleapis.com/tasks/v1/users/@me/lists', {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n      setTasks(response.data.items);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log('Error fetching tasks:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, padding: 16 }}>\r\n      <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 16 }}>Task List</Text>\r\n      {loading ? (\r\n        <Text>Loading tasks...</Text>\r\n      ) : (\r\n        <FlatList\r\n          data={tasks}\r\n          keyExtractor={(item) => item.id}\r\n          renderItem={({ item }) => <Text>{item.title}</Text>}\r\n        />\r\n      )}\r\n      <Button title=\"Logout\" onPress={() => handleLogout()} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MainAppScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { View, Text, Button, FlatList } from 'react-native';\r\n// import axios from 'axios';\r\n\r\n// const MainAppScreen = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const accessToken = 'YOUR_ACCESS_TOKEN'; // Retrieve the access token from AsyncStorage or Redux state.\r\n\r\n//   useEffect(() => {\r\n//     fetchTasks();\r\n//   }, []);\r\n\r\n//   const fetchTasks = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.get('https://tasks.googleapis.com/tasks/v1/users/@me/lists', {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//       });\r\n//       setTasks(response.data.items);\r\n//       setLoading(false);\r\n//     } catch (error) {\r\n//       console.log('Error fetching tasks:', error);\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={{ flex: 1, padding: 16 }}>\r\n//       <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 16 }}>Task List</Text>\r\n//       {loading ? (\r\n//         <Text>Loading tasks...</Text>\r\n//       ) : (\r\n//         <FlatList\r\n//           data={tasks}\r\n//           keyExtractor={(item) => item.id}\r\n//           renderItem={({ item }) => <Text>{item.title}</Text>}\r\n//         />\r\n//       )}\r\n//       <Button title=\"Logout\" onPress={() => handleLogout()} />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default MainAppScreen;","// import React, { useState } from 'react';\r\n// import { View, Button, Text } from 'react-native';\r\n// import { prefetchConfiguration } from 'react-native-app-auth';\r\n// import axios from 'axios';\r\n\r\n// const config = {\r\n//   warmAndPrefetchChrome: true,\r\n//   issuer: 'https://accounts.google.com',\r\n//   clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//   redirectUrl: 'http://localhost:19006',\r\n//   scopes: ['https://www.googleapis.com/auth/tasks'],\r\n// };\r\n\r\n// function GoogleTaskApp() {\r\n//   const [accessToken, setAccessToken] = useState(null);\r\n\r\n//   const handleLogin = async () => {\r\n//     try {\r\n//       const result = await prefetchConfiguration(config);\r\n//       console.log(result);\r\n//       setAccessToken(result.accessToken);\r\n//     } catch (error) {\r\n//       console.log('OAuth Error: ', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateTaskList = async () => {\r\n//     try {\r\n//       if (!accessToken) {\r\n//         console.log('Access Token is not available. Please log in first.');\r\n//         return;\r\n//       }\r\n\r\n//       const result = await axios.post(\r\n//         'https://tasks.googleapis.com/tasks/v1/users/@me/lists',\r\n//         { title: 'Toooodooooooo' },\r\n//         {\r\n//           headers: {\r\n//             Authorization: 'Bearer ' + accessToken,\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       console.log(result.data);\r\n//     } catch (error) {\r\n//       console.log('API Error: ', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n//       <Text>{accessToken ? 'Logged In' : 'Not Logged In'}</Text>\r\n//       <Button title=\"Login with Google\" onPress={handleLogin} />\r\n//       {accessToken && (\r\n//         <Button title=\"Create Task List\" onPress={handleCreateTaskList} />\r\n//       )}\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// export default GoogleTaskApp;\r\n\r\n// For WEBVIEW\r\n// import React, { useEffect } from 'react';\r\n// import { View, ActivityIndicator } from 'react-native';\r\n// import { Linking } from 'react-native';\r\n// import { useNavigation } from '@react-navigation/native';\r\n// import axios from 'axios';\r\n// import { WebView } from 'react-native-webview';\r\n\r\n// const OAuthScreen = () => {\r\n//   const navigation = useNavigation();\r\n\r\n//   const oauthConfig = {\r\n//     authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n//     redirectUri: 'http://localhost:19006',\r\n//     clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//     scopes: 'https://www.googleapis.com/auth/tasks',\r\n//   };\r\n\r\n//   const handleTokenExchange = async (code) => {\r\n//     try {\r\n//       const response = await axios.post('https://oauth2.googleapis.com/token', {\r\n//         grant_type: 'authorization_code',\r\n//         code: code,\r\n//         redirect_uri: oauthConfig.redirectUri,\r\n//         client_id: oauthConfig.clientId,\r\n//         scopes: oauthConfig.scopes,\r\n//         client_secret: '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',\r\n//       });\r\n\r\n//       const accessToken = response.data.access_token;\r\n//       console.log('Access Token:', accessToken);\r\n\r\n//       navigation.navigate('MainAppScreen', { accessToken });\r\n//     } catch (error) {\r\n//       console.log('Token Exchange Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleNavigationStateChange = async (newNavState) => {\r\n//     // Check if the WebView URL contains the redirectUri\r\n//     if (newNavState.url.startsWith(oauthConfig.redirectUri)) {\r\n//       // Parse the URL to get the authorization code\r\n//       const urlParams = newNavState.url.split('?')[1];\r\n//       const code = new URLSearchParams(urlParams).get('code');\r\n\r\n//       if (code) {\r\n//         // If code is present, handle token exchange\r\n//         handleTokenExchange(code);\r\n//       } else {\r\n//         // Handle the case when the URL doesn't contain the authorization code\r\n//         console.log('Authorization Code Not Found');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Open the Google OAuth authorization page in the WebView\r\n//     const authUrl = `${oauthConfig.authorizationEndpoint}?response_type=code&client_id=${oauthConfig.clientId}&redirect_uri=${oauthConfig.redirectUri}&scope=${oauthConfig.scopes}`;\r\n//     Linking.openURL(authUrl);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <View style={{ flex: 1 }}>\r\n//       <WebView\r\n//         source={{ uri: oauthConfig.authorizationEndpoint }}\r\n//         onNavigationStateChange={handleNavigationStateChange}\r\n//         startInLoadingState={true}\r\n//         renderLoading={() => <ActivityIndicator size=\"large\" />}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default OAuthScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { View, ActivityIndicator, Button } from 'react-native';\r\n// import * as WebBrowser from 'expo-web-browser';\r\n// import { useNavigation } from '@react-navigation/native';\r\n// import axios from 'axios';\r\n\r\n// const OAuthScreen = () => {\r\n//   const navigation = useNavigation();\r\n\r\n//   const oauthConfig = {\r\n//     authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n//     redirectUri: 'https://7959-103-152-116-115.ngrok-free.app',\r\n//     clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//     scopes: 'https://www.googleapis.com/auth/tasks',\r\n//   };\r\n\r\n//   const [isAuthenticating, setIsAuthenticating] = useState(false);\r\n\r\n//   const handleTokenExchange = async (code) => {\r\n//     try {\r\n//       const response = await axios.post('https://oauth2.googleapis.com/token', {\r\n//         grant_type: 'authorization_code',\r\n//         code: code,\r\n//         redirect_uri: oauthConfig.redirectUri,\r\n//         client_id: oauthConfig.clientId,\r\n//         scopes: oauthConfig.scopes,\r\n//         client_secret: \"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\",\r\n//       });\r\n\r\n//       const accessToken = response.data.access_token;\r\n//       console.log('Access Token:', accessToken);\r\n\r\n//       navigation.navigate('MainAppScreen', { accessToken });\r\n//     } catch (error) {\r\n//       console.log('Token Exchange Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   const openBrowserAsync = async () => {\r\n//     if (!isAuthenticating) {\r\n//       setIsAuthenticating(true);\r\n//       try {\r\n//         const authUrl = `${oauthConfig.authorizationEndpoint}?response_type=code&client_id=${oauthConfig.clientId}&redirect_uri=${oauthConfig.redirectUri}&scope=${oauthConfig.scopes}`;\r\n//         const result = await WebBrowser.openAuthSessionAsync(authUrl);\r\n\r\n//         if (result.type === 'success' && result.url) {\r\n//           const urlParams = result.url.split('?')[1];\r\n//           const code = new URLSearchParams(urlParams).get('code');\r\n//           if (code) {\r\n//             handleTokenExchange(code);\r\n//           } else {\r\n//             console.log('Authorization Code Not Found');\r\n//           }\r\n//         } else if (result.type === 'cancel') {\r\n//           console.log('User Cancelled the Login Process');\r\n//         } else if (result.type === 'dismiss') {\r\n//           console.log('User Dismissed the Web Authentication Flow');\r\n//         } else {\r\n//           console.log('Error during web authentication:', result);\r\n//         }\r\n//       } catch (error) {\r\n//         console.log('WebBrowser Error:', error);\r\n//       } finally {\r\n//         setIsAuthenticating(false);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View style={{ flex: 1 }}>\r\n//       <Button title=\"Login with Google\" onPress={openBrowserAsync} />\r\n//       {isAuthenticating ? <ActivityIndicator size=\"large\" /> : null}\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default OAuthScreen;\r\n\r\n\r\n\r\n\r\n// ////Correct Code Zain\r\n// import React, { useEffect, useState } from 'react';\r\n// import { View, ActivityIndicator } from 'react-native';\r\n// import { Linking } from 'react-native';\r\n// import * as WebBrowser from 'expo-web-browser';\r\n// import { InAppBrowser } from 'react-native-inappbrowser-reborn';\r\n// import { useNavigation } from '@react-navigation/native';\r\n// import axios from 'axios';\r\n\r\n\r\n\r\n// const OAuthScreen = () => {\r\n//   const navigation = useNavigation();\r\n\r\n//   const oauthConfig = {\r\n//     authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n//     redirectUri: 'http://localhost:19006',\r\n//     clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//     scopes: 'https://www.googleapis.com/auth/tasks',\r\n//   };\r\n\r\n//   const [isAuthenticating, setIsAuthenticating] = useState(false);\r\n\r\n//   const handleTokenExchange = async (code) => {\r\n//     try {\r\n//       const response = await axios.post('https://oauth2.googleapis.com/token', {\r\n//         grant_type: 'authorization_code',\r\n//         code: code,\r\n//         redirect_uri: oauthConfig.redirectUri,\r\n//         client_id: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//         scopes: 'https://www.googleapis.com/auth/tasks',\r\n//         // auth_provider_x509_cert_url:\"https://www.googleapis.com/oauth2/v1/certs\",\r\n//         client_secret:\"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\",\r\n        \r\n//       });\r\n\r\n//       const accessToken = response.data.access_token;\r\n//       console.log('Access Token:', accessToken);\r\n\r\n      \r\n//       navigation.navigate('MainAppScreen', { accessToken });\r\n//     } catch (error) {\r\n//       console.log('Token Exchange Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   const openBrowserAsync = async () => {\r\n//     if (!isAuthenticating) {\r\n//       setIsAuthenticating(true);\r\n//       try {\r\n        \r\n      \r\n//         const authUrl = `${oauthConfig.authorizationEndpoint}?response_type=code&client_id=${oauthConfig.clientId}&redirect_uri=${oauthConfig.redirectUri}&scope=${oauthConfig.scopes}`;\r\n//         const result = await WebBrowser.openAuthSessionAsync(authUrl);\r\n//         // window.location.href = authUrl;\r\n//         console.log(\"Zainnnnnnn\", result);\r\n//         return false;\r\n//         if (result.type === 'success' && result.url) {\r\n//           const urlParams = result.url.split('?')[1];\r\n//           const code = new URLSearchParams(urlParams).get('code');\r\n//           if (code) {\r\n//             handleTokenExchange(code);\r\n//           } else {\r\n//             console.log('Authorization Code Not Found');\r\n//           }\r\n//         } else if (result.type === 'cancel') {\r\n        \r\n//           console.log('User Cancelled the Login Process');\r\n//         } else if (result.type === 'dismiss') {\r\n         \r\n//           console.log('User Dismissed the Web Authentication Flow');\r\n//         } else {\r\n        \r\n//           console.log('Error during web authentication:', result);\r\n//         }\r\n//       } catch (error) {\r\n//         console.log('WebBrowser Error:', error);\r\n//       } finally {\r\n//         setIsAuthenticating(false);\r\n//       }\r\n//       }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     openBrowserAsync();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <View style={{ flex: 1 }}>\r\n//       {isAuthenticating ? <ActivityIndicator size=\"large\" /> : null}\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default OAuthScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { View, ActivityIndicator, Button, StyleSheet } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as WebBrowser from 'expo-web-browser';\r\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\r\nimport MainAppScreen from './MainAppScreen';\r\n\r\nconst OAuthScreen = () => {\r\n  const navigation = useNavigation();\r\n\r\n  const oauthConfig = {\r\n    clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n    scopes: ['https://www.googleapis.com/auth/tasks'],\r\n  };\r\n\r\n  const discovery = {\r\n    authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n    tokenEndpoint: 'https://oauth2.googleapis.com/token',\r\n  };\r\n\r\n  const [request, response, promptAsync] = useAuthRequest(\r\n    {\r\n      clientId: oauthConfig.clientId,\r\n      scopes: oauthConfig.scopes,\r\n      redirectUri: makeRedirectUri({ native: 'https://8d7b-182-185-150-29.ngrok-free.app' }),\r\n    },\r\n    discovery\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (response?.type === 'success') {\r\n      const { code } = response.params;\r\n      handleTokenExchange(code);\r\n      console.log('ZAAINN', code);\r\n    }\r\n  }, [response]);\r\n\r\n  const handleTokenExchange = async (code) => {\r\n    try {\r\n      const response = await fetch('https://oauth2.googleapis.com/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: `grant_type=authorization_code&code=${code}&redirect_uri=${makeRedirectUri({\r\n          native: 'https://8d7b-182-185-150-29.ngrok-free.app',\r\n        })}&client_id=${oauthConfig.clientId}`,\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log('ZAIN', data);\r\n      const accessToken = data.access_token;\r\n      WebBrowser.dismissBrowser();\r\n\r\n      navigation.navigate('MainAppScreen', { accessToken });\r\n    } catch (error) {\r\n      console.log('Token Exchange Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ActivityIndicator animating={!response} />\r\n      {!response && (\r\n        <View style={styles.buttonContainer}>\r\n          <Button\r\n            disabled={!request}\r\n            title=\"Login with Google\"\r\n            onPress={() => {\r\n              promptAsync();\r\n            }}\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonContainer: {\r\n    width: '80%',\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nexport default OAuthScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // CODE OKKKAY\r\n// import React, { useEffect } from 'react';\r\n// import { View, ActivityIndicator } from 'react-native';\r\n// import * as WebBrowser from 'expo-web-browser';\r\n// import { useNavigation } from '@react-navigation/native';\r\n\r\n\r\n// const OAuthScreen = () => {\r\n//   const navigation = useNavigation();\r\n\r\n//   const oauthConfig = {\r\n//     authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n//     redirectUri: 'http://localhost:19006',\r\n//     clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//     scopes: 'https://www.googleapis.com/auth/tasks',\r\n//   };\r\n\r\n//   const handleTokenExchange = async (code) => {\r\n//     try {\r\n//       const response = await fetch('https://oauth2.googleapis.com/token', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/x-www-form-urlencoded',\r\n//         },\r\n//         body: `grant_type=authorization_code&code=${code}&redirect_uri=${oauthConfig.redirectUri}&client_id=${oauthConfig.clientId}`,\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       const accessToken = data.access_token;\r\n//       console.log('Access Token:', accessToken);\r\n\r\n//       navigation.navigate('MainAppScreen', { accessToken });\r\n//     } catch (error) {\r\n//       console.log('Token Exchange Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   const openBrowserAsync = async () => {\r\n//     try {\r\n//       const authUrl = `${oauthConfig.authorizationEndpoint}?response_type=code&client_id=${oauthConfig.clientId}&redirect_uri=${oauthConfig.redirectUri}&scope=${oauthConfig.scopes}`;\r\n//       const result = await WebBrowser.openAuthSessionAsync(authUrl);\r\n//       console.log(\"Zainnnnnnnn\", result);\r\n//       alert('Zainnnn');\r\n//       // return false;\r\n      \r\n//       if (result.type === 'success' && result.url) {\r\n        \r\n//         const urlParams = result.url.split('?')[1];\r\n//         const code = new URLSearchParams(urlParams).get('code');\r\n//         if (code) {\r\n//           handleTokenExchange(code);\r\n//         } else {\r\n//           console.log('Authorization Code Not Found');\r\n//         }\r\n//       } else if (result.type === 'cancel') {\r\n       \r\n//         console.log('User Cancelled the Login Process');\r\n//       } else if (result.type === 'dismiss') {\r\n      \r\n//         console.log('User Dismissed the Web Authentication Flow');\r\n//       } else {\r\n    \r\n//         console.log('Error during web authentication:', result);\r\n//       }\r\n//     } catch (error) {\r\n//       console.log('WebBrowser Error:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     openBrowserAsync();\r\n//   }, []);\r\n  \r\n\r\n//   return (\r\n//     <View style={{ flex: 1 }}>\r\n//       <ActivityIndicator size=\"large\" />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default OAuthScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { View, ActivityIndicator } from 'react-native';\r\n// import WebView from 'react-native-webview';\r\n// import axios from 'axios';\r\n\r\n// const OAuthScreen = ({ navigation }) => {\r\n//   const oauthConfig = {\r\n//     authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n//     tokenEndpoint: 'https://oauth2.googleapis.com/token',\r\n//     clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\r\n//     redirectUri: 'https://661f-175-107-237-167.ngrok-free.app',\r\n//     scopes: 'https://www.googleapis.com/auth/tasks',\r\n//     response_type: 'code',\r\n//   };\r\n\r\n//   const handleTokenExchange = async (code) => {\r\n//     try {\r\n//       const response = await axios.post(oauthConfig.tokenEndpoint, {\r\n//         grant_type: 'authorization_code',\r\n//         code: code,\r\n//         redirect_uri: oauthConfig.redirectUri,\r\n//         client_id: oauthConfig.clientId,\r\n//       });\r\n\r\n//       const accessToken = response.data.access_token;\r\n      \r\n//       console.log('Access Token:', accessToken);\r\n\r\n     \r\n//       navigation.navigate('MainAppScreen');\r\n//     } catch (error) {\r\n//       console.log('Token Exchange Error:', error);\r\n     \r\n//     }\r\n//   };\r\n\r\n//   const handleNavigationStateChange = (newNavState) => {\r\n    \r\n//     if (newNavState.url.startsWith(oauthConfig.redirectUri)) {\r\n     \r\n//       const urlParams = newNavState.url.split('?')[1];\r\n//       const code = new URLSearchParams(urlParams).get('code');\r\n\r\n//       if (code) {\r\n       \r\n//         handleTokenExchange(code);\r\n//       } else {\r\n \r\n//         console.log('Authorization Code Not Found');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const authUrl = `${oauthConfig.authorizationEndpoint}?client_id=${oauthConfig.clientId}&redirect_uri=${encodeURIComponent(\r\n//     oauthConfig.redirectUri\r\n//   )}&response_type=${oauthConfig.response_type}&scope=${encodeURIComponent(oauthConfig.scopes)}`;\r\n\r\n//   return (\r\n//     <View style={{ flex: 1 }}>\r\n//       <WebView\r\n//         source={{ uri: authUrl }}\r\n//         onNavigationStateChange={handleNavigationStateChange}\r\n//         startInLoadingState={true}\r\n//         renderLoading={() => <ActivityIndicator size=\"large\" />}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default OAuthScreen;\r\n\r\n\r\n","// import { NavigationContainer } from '@react-navigation/native';\n// import { createStackNavigator } from '@react-navigation/stack';\n// import React from 'react';\n// // import { configure } from 'react-native-dotenv';\n// import TokenPage from './screens/TokenPage'; \n// import TaskListScreen from './screens/TaskListScreen'; \n// // import GoogleTaskAPI from './screens/GoogleTaskAPI'; \n\n\n// // configure();\n\n// const Stack = createStackNavigator();\n\n// function App() {\n//   return (\n//     <NavigationContainer>\n//       <Stack.Navigator initialRouteName=\"TokenPage\">\n//         <Stack.Screen name=\"TODO App\" component={TokenPage} />\n//         <Stack.Screen name=\"TaskListScreen\" component={TaskListScreen} />\n//         {/* <Stack.Screen name=\"GoogleTaskAPI\" component={OAuthScreen} /> */}\n//       </Stack.Navigator>\n//     </NavigationContainer>\n//   );\n// }\n\n// export default App;\n\n\n\n// // App.js\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport OAuthScreen from './OAuthScreen';\nimport MainAppScreen from './MainAppScreen';\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"OAuthScreen\" component={OAuthScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"MainAppScreen\" component={MainAppScreen} options={{ headerShown: false }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import { View } from 'react-native';\n// import GoogleTaskApp from './GoogleTaskApp';\n\n// function App() {\n//   return (\n//     <View style={{ flex: 1 }}>\n//       <GoogleTaskApp />\n//     </View>\n//   );\n// }\n\n// export default App;\n\n\n// import React from 'react';\n// import { View, Button } from 'react-native';\n// import { authorize } from 'react-native-app-auth';\n// import axios from 'axios';\n\n// const config = {\n//   issuer: 'https://accounts.google.com',\n//   clientId: '20683120727-c2077cnt279jihraf7gm0p76rhceealh.apps.googleusercontent.com',\n//   clientSecret: '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',\n//   redirectUrl: 'http://localhost:19006',\n//   scopes: ['https://www.googleapis.com/auth/tasks'],\n// };\n\n// async function getURLTasks() {\n//   try {\n//     const result = await authorize(config);\n//     console.log(result);\n//     return result.accessToken;\n//   } catch (error) {\n//     console.log('OAuth Error: ', error);\n//     throw error;\n//   }\n// }\n\n// async function createTaskList(accessToken) {\n//   try {\n//     const result = await axios({\n//       method: 'POST',\n//       headers: {\n//         Authorization: 'Bearer ' + accessToken,\n//         'Content-Type': 'application/json',\n//       },\n//       url: 'https://tasks.googleapis.com/tasks/v1/users/@me/lists',\n//       data: {\n//         title: 'TODO Task List',\n//       },\n//     });\n\n//     console.log(result.data);\n//     return result.data;\n//   } catch (error) {\n//     console.log('API Error: ', error);\n//     throw error;\n//   }\n// }\n\n// function App() {\n//   const handleLogin = async () => {\n//     try {\n//       const accessToken = await getURLTasks();\n//       console.log('Access Token: ', accessToken);\n//       // Store accessToken in your app's state or context for later use.\n//     } catch (error) {\n//       console.log('Login Error: ', error);\n//     }\n//   };\n\n//   return (\n//     <View>\n//       <Button title=\"Login with Google\" onPress={handleLogin} />\n//     </View>\n//   );\n// }\n\n// export default App;\n\n\n\n// import React, { useState } from 'react';\n// import { View, Text, Button, TextInput, StyleSheet } from 'react-native';\n// import axios from 'axios';\n\n// const App = () => {\n//   const [accessToken, setAccessToken] = useState('');\n//   const [taskTitle, setTaskTitle] = useState('');\n//   const [taskCreationMessage, setTaskCreationMessage] = useState('');\n\n//   const handleCreateTaskList = async () => {\n//     try {\n//       const response = await axios.post(\n//         'http://localhost:3000/createTaskList',\n//         {\n//           accessToken: accessToken,\n//           title: taskTitle,\n//         }\n//       );\n\n//       setTaskCreationMessage(response.data);\n//     } catch (error) {\n//       console.log('Error creating the task list:', error);\n//       setTaskCreationMessage('Error creating the task list. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       <TextInput\n//         style={styles.input}\n//         placeholder=\"Enter Access Token\"\n//         onChangeText={(text) => setAccessToken(text)}\n//         value={accessToken}\n//       />\n//       <TextInput\n//         style={styles.input}\n//         placeholder=\"Enter Task Title\"\n//         onChangeText={(text) => setTaskTitle(text)}\n//         value={taskTitle}\n//       />\n//       <Button title=\"Create Task List\" onPress={handleCreateTaskList} />\n//       <Text>{taskCreationMessage}</Text>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     padding: 20,\n//   },\n//   input: {\n//     width: '100%',\n//     height: 40,\n//     borderWidth: 1,\n//     borderColor: 'gray',\n//     marginBottom: 10,\n//     paddingHorizontal: 10,\n//   },\n// });\n\n// export default App;\n\n\n\n// import { StatusBar } from 'expo-status-bar';\n// import { StyleSheet, Text, View, Button, Linking } from 'react-native';\n// import React, { useEffect, useState } from 'react';\n// import { myFetchGetUrlRequest } from './MyFetchApiRequests';\n\n// export default function App() {\n//   const [responseData, setResponseData] = useState(null);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     try {\n//       const res = await myFetchGetUrlRequest();\n//       console.log(\"Zain\", res);\n//       setResponseData(res);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const handleButtonPress = async () => {\n//     await getData();\n//     if (responseData) {\n//       const url = responseData.url;\n//       Linking.openURL(url);\n//     }\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       {/* <Text>Data from API: {responseData ? JSON.stringify(responseData) : 'No data available.'}</Text> */}\n//       <Button title=\"Open Response URL\" onPress={handleButtonPress} />\n//       <StatusBar style=\"auto\" />\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n\n\n\n// import { StatusBar } from 'expo-status-bar';\n// import { StyleSheet, Text, View, Button, Linking } from 'react-native';\n// import React, { useEffect, useState } from 'react';\n// import { myFetchGetUrlRequest } from './MyFetchApiRequests';\n\n// export default function App() {\n//   const [responseData, setResponseData] = useState(null);\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const getData = async () => {\n//     try {\n//       const res = await myFetchGetUrlRequest();\n//       console.log(\"Zain\", res);\n//       setResponseData(res);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const handleButtonPress = async () => {\n//     await getData();\n//     if (responseData && responseData.url) {\n//       const url = responseData.url;\n//       const isLocalhost = url.includes('localhost') && !/http:\\/\\/(localhost|127\\.0\\.0\\.1)/.test(url);\n//       if (isLocalhost) {\n//         // Open URL in the browser of the emulator/simulator\n//         Linking.openURL(url);\n//       } else {\n//         console.log(\"Redirecting to:\", url);\n//         Linking.openURL('http://' + url);\n//       }\n//     }\n//   };\n\n//   return (\n\n//     <View style={styles.container}>\n//       {/* <Text>Data from API: {responseData ? JSON.stringify(responseData) : 'No data available.'}</Text> */}\n//       <Button title=\"Open Response URL\" onPress={handleButtonPress} />\n//       <StatusBar style=\"auto\" />\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [317], () => (__webpack_require__(386)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_ref","accessToken","route","params","_useState","useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","loading","setLoading","useEffect","fetchTasks","_ref2","_asyncToGenerator","response","axios","get","headers","Authorization","data","items","error","console","log","apply","arguments","_jsxs","View","style","flex","padding","children","_jsx","Text","fontSize","fontWeight","marginBottom","FlatList","keyExtractor","item","id","renderItem","_ref3","title","Button","onPress","handleLogout","styles","StyleSheet","create","container","justifyContent","alignItems","buttonContainer","width","navigation","useNavigation","oauthConfig","clientId","scopes","_useAuthRequest","useAuthRequest","redirectUri","makeRedirectUri","native","authorizationEndpoint","tokenEndpoint","_useAuthRequest2","request","promptAsync","type","code","handleTokenExchange","fetch","method","body","json","access_token","WebBrowser","dismissBrowser","navigate","_x","ActivityIndicator","animating","disabled","Stack","createStackNavigator","NavigationContainer","Navigator","Screen","name","component","OAuthScreen","options","headerShown","MainAppScreen","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}